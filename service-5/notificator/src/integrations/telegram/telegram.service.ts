import { Injectable, Logger } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Context, Telegraf, Markup } from 'telegraf';
import { PrismaService } from '../../prisma/prisma.service';
import * as fs from 'fs';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class TelegramService {
  private readonly logger: Logger = new Logger(TelegramService.name);
  private readonly logFilePath: string;
  private readonly ownerChatId: string;
  private activeConversations: Map<string, string> = new Map<string, string>();

  constructor(
    @InjectBot() private readonly bot: Telegraf,
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService,
  ) {
    this.logFilePath = this.configService.get<string>('LOG_FILE_PATH');
    this.ownerChatId = this.configService.get<string>('OWNER_CHAT_ID');
    this.initListeners();
  }

  private initListeners() {
    this.bot.start(async (ctx: Context): Promise<void> => {
      const chatId: string = String(ctx.chat.id);
      const username: string = ctx.from?.username || `User_${chatId}`;
      this.logger.log(`User @${username} (${chatId}) started bot`);

      await this.prisma.user.upsert({
        where: { chatId },
        update: { username, isWaitingForRegion: true },
        create: { chatId, username, isWaitingForRegion: true },
      });

      await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –í–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–π —Ä–µ–≥—ñ–æ–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É:');
    });

    this.bot.on('message', async (ctx: Context): Promise<void> => {
      const chatId: string = String(ctx.chat.id);
      const username: string = ctx.from?.username || `User_${chatId}`;
      const message: string = ctx.text || '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]';
      const timestamp: string = new Date().toISOString();

      if (
        chatId === this.ownerChatId &&
        message.startsWith('–ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑')
      ) {
        const targetUsername: string = message.split(' ')[3];
        const targetUser = await this.prisma.user.findUnique({
          where: { username: targetUsername },
        });

        if (targetUser) {
          this.activeConversations.set(this.ownerChatId, targetUser.chatId);
          this.activeConversations.set(targetUser.chatId, this.ownerChatId);
          await this.sendMessageToUserByChatId(
            targetUser.chatId,
            '–ü–æ–≥–æ–¥–∞ UA –ø–æ—á–∏–Ω–∞—î –¥—ñ–∞–ª–æ–≥',
          );
          await ctx.reply(`–†–æ–∑–ø–æ—á–∞—Ç–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ @${targetUsername}.`);
        } else {
          await ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${targetUsername} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
        }
        return;
      }

      if (chatId === this.ownerChatId && message === '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è') {
        const targetChatId: string = this.activeConversations.get(
          this.ownerChatId,
        );
        if (targetChatId) {
          this.activeConversations.delete(this.ownerChatId);
          this.activeConversations.delete(targetChatId);
          await this.sendMessageToUserByChatId(
            targetChatId,
            '–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.',
          );
          await ctx.reply('–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
        } else {
          await ctx.reply('–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.');
        }
        return;
      }

      const activeChatId: string = this.activeConversations.get(chatId);
      if (activeChatId) {
        await this.sendMessageToUserByChatId(activeChatId, message);
        return;
      }

      const user = await this.prisma.user.findUnique({ where: { chatId } });

      if (user?.isWaitingForRegion) {
        await this.prisma.user.update({
          where: { chatId },
          data: { region: message, isWaitingForRegion: false },
        });

        await ctx.reply(
          `–†–µ–≥—ñ–æ–Ω "${message}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ!`,
          this.getMenuKeyboard(),
        );
      } else {
        this.logger.log(`@${username}: ${message}`);
        this.logMessageIntoFile({ chatId, username, timestamp, message });
        await this.sendMessageToUserByChatId(
          this.ownerChatId,
          `${username}: ${message}`,
        );
      }
    });

    this.bot.action('forecast_week', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.reply('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å: [–¢—É—Ç –±—É–¥–µ –ø—Ä–æ–≥–Ω–æ–∑]');
    });

    this.bot.action('change_region', async (ctx) => {
      const chatId: string = String(ctx.chat.id);
      await this.prisma.user.update({
        where: { chatId },
        data: { isWaitingForRegion: true },
      });
      await ctx.answerCbQuery();
      await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–µ–≥—ñ–æ–Ω:');
    });

    this.bot.action('stop_forecasts', async (ctx) => {
      const chatId: string = String(ctx.chat.id);
      await this.prisma.user.update({
        where: { chatId },
        data: { receiveForecasts: false },
      });
      await ctx.answerCbQuery();
      await ctx.reply('–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤.');
    });
  }

  private getMenuKeyboard() {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å', 'forecast_week')],
      [Markup.button.callback('üåç –ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–≥—ñ–æ–Ω', 'change_region')],
      [
        Markup.button.callback(
          'üö´ –ó—É–ø–∏–Ω–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤',
          'stop_forecasts',
        ),
      ],
    ]);
  }

  private logMessageIntoFile(entry: object) {
    const logData = JSON.stringify(entry) + '\n';
    fs.appendFile(this.logFilePath, logData, (err) => {
      if (err) {
        this.logger.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª:', err);
      }
    });
  }

  async sendWeatherUpdate(chatId: string, forecast: string) {
    await this.bot.telegram.sendMessage(
      chatId,
      `–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏:\n${forecast}`,
      this.getMenuKeyboard(),
    );
  }

  async sendMessageToUserByChatId(chatId: string, message: string) {
    await this.bot.telegram.sendMessage(chatId, message);
  }
}
